class Solution {
    int[] parent;
    int[] size;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        
        parent = new int[n];
        size = new int[n];
        
        for(int i=0; i<n; i++) {
            parent[i] = i;
        }
        
        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                if(graph[i][j] == 1) {
                    union(i, j);
                }
            }
        }
        
        int[] infected = new int[n];
        for(int node : initial) {
            int p = find(node);
            infected[p]++;
        }
        
        int ans = -1;
        int maxSize = -1;
        
        for(int e : initial) {
            int p = find(e);
            
            if(infected[p] == 1 && size[p] >= maxSize) {
                if(size[p] == maxSize) {
                    ans = Math.min(ans, e);
                }else {
                    ans = e;
                }
                maxSize = size[p];
            }
        }
        
        if(ans == -1) {
           int min = n + 1;
            for(int e : initial) {
                min = Math.min(min, e);
            }
            
            return min;
        }
        
        return ans;
    }
    
    private boolean union(int p1, int p2) {
        int lp1 = find(p1);
        int lp2 = find(p2);
        
        if(lp1 == lp2) return true;
        
        if(size[lp1] > size[lp2]) {
            parent[lp2] = lp1;
            size[lp1]++;
        }else if(size[lp2] > size[lp1]) {
            parent[lp1] = lp2;
            size[lp2]++;
        }else {
            parent[lp2] = lp1;
            size[lp1]++;
        }
        
        return true;
    }
    
    private int find(int x) {
        if(parent[x] == x) return x;
        
        return parent[x] = find(parent[x]);
    }
}